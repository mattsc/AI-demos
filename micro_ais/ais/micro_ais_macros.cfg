#textdomain wesnoth-AI-demos

#define RCA_STAGE
    # The standard RCA stage with its candidate actions; same for all Micro AIs
    [stage]
        id=main_loop
        name=ai_default_rca::candidate_action_evaluation_loop
        {AI_CA_GOTO}
        {AI_CA_RECRUITMENT}
        {AI_CA_MOVE_LEADER_TO_GOALS}
        {AI_CA_MOVE_LEADER_TO_KEEP}
        {AI_CA_COMBAT}
        {AI_CA_HEALING}
        {AI_CA_VILLAGES}
        {AI_CA_RETREAT}
        {AI_CA_MOVE_TO_TARGETS}
        {AI_CA_LEADER_SHARES_KEEP}
    [/stage]
#enddef

#define MICRO_AI_HEALER_SUPPORT
    # Sets up the healer support Micro AI for a side
    # Include this macro in the side definition
    # Needs to be in [side], does not work in [modify_side] in BfW 1.10

    [ai]
        id=healer_support
        description=_"Healer Support Micro AI"
        version=10710
        [engine]
            name="lua"
            code= <<
                local ai = ...
                return wesnoth.require("~add-ons/AI-demos/micro_ais/ais/mai_healer_support_engine.lua").init(ai)
            >>
        [/engine]
        {RCA_STAGE}
    [/ai]
#enddef

#define MICRO_AI_BOTTLENECK_DEFENSE
    # Sets up the bottleneck defense Micro AI for a side
    # Include this macro in the side definition
    # Needs to be in [side], does not work in [modify_side] in BfW 1.10

    [ai]
        id=bottleneck_defense
        description=_"Bottleneck Defense Micro AI"
        version=10710
        [engine]
            name="lua"
            code= <<
                local ai = ...
                return wesnoth.require("~add-ons/AI-demos/micro_ais/ais/mai_bottleneck_defense_engine.lua").init(ai)
            >>
        [/engine]
        {RCA_STAGE}
    [/ai]
#enddef

#define MICRO_AI_MESSENGER_ESCORT
    # Sets up the messenger escort Micro AI for a side
    # Include this macro in the side definition
    # Needs to be in [side], does not work in [modify_side] in BfW 1.10

    [ai]
        id=messenger_escort
        description=_"Messenger Escort Micro AI"
        version=10710
        [engine]
            name="lua"
            code= <<
                local ai = ...
                return wesnoth.require("~add-ons/AI-demos/micro_ais/ais/mai_messenger_escort_engine.lua").init(ai)
            >>
        [/engine]
        {RCA_STAGE}
    [/ai]
#enddef

#define MICRO_AI_ANIMALS
    # Sets up the animals Micro AIs for a side
    # Include this macro in the side definition
    # Needs to be in [side], does not work in [modify_side] in BfW 1.10

    [ai]
        id=animals
        description=_"Animals Micro AI"
        version=10710
        [engine]
            name="lua"
            code= <<
                local ai = ...
                return wesnoth.require("~add-ons/AI-demos/micro_ais/ais/mai_animals_engine.lua").init(ai)
            >>
        [/engine]
        {RCA_STAGE}
    [/ai]
#enddef

#define MICRO_AI_GUARDIAN
    # Sets up the guardian Micro AIs for a side
    # Include this macro in the side definition
    # Needs to be in [side], does not work in [modify_side] in BfW 1.10

    [ai]
        id=guardian
        description=_"Guardian Micro AI"
        version=10710
        [engine]
            name="lua"
            code= <<
                local ai = ...
                return wesnoth.require("~add-ons/AI-demos/micro_ais/ais/mai_guardian_engine.lua").init(ai)
            >>
        [/engine]
        {RCA_STAGE}
    [/ai]
#enddef

#define MICRO_AI_PROTECT_UNIT
    # Sets up the protect unit Micro AI for a side
    # Include this macro in the side definition
    # Needs to be in [side], does not work in [modify_side] in BfW 1.10

    [ai]
        id=protect_unit
        description=_"Protect Unit Micro AI"
        version=10710
        [engine]
            name="lua"
            code= <<
                local ai = ...
                return wesnoth.require("~add-ons/AI-demos/micro_ais/ais/mai_protect_unit_engine.lua").init(ai)
          >>
        [/engine]
        {RCA_STAGE}
    [/ai]
#enddef

#define MICRO_AI_PATROL
    # Sets up the patrol Micro AI for a side
    # Include this macro in the side definition
    # Needs to be in [side], does not work in [modify_side] in BfW 1.10

    [ai]
        id=patrol
        description=_"Patrol Micro AI"
        version=10710
        [engine]
            name="lua"
            code= <<
                local ai = ...
                return wesnoth.require("~add-ons/AI-demos/micro_ais/ais/mai_patrol_engine.lua").init(ai)
          >>
        [/engine]
        {RCA_STAGE}
    [/ai]
#enddef

#define MICRO_AI_LURKERS
    # Sets up the lurkers Micro AI for a side
    # Include this macro in the side definition
    # Needs to be in [side], does not work in [modify_side] in BfW 1.10

    [ai]
        id=lurkers
        description=_"Lurkers Micro AI"
        version=10710
        [engine]
            name="lua"
            code= <<
                local ai = ...
                return wesnoth.require("~add-ons/AI-demos/micro_ais/ais/mai_lurkers_engine.lua").init(ai)
            >>
        [/engine]
        {RCA_STAGE}
    [/ai]
#enddef

#define MICRO_AI_RECRUITING
    # Sets up the recruiting Micro AI for a side
    # Include this macro in the side definition
    # Needs to be in [side], does not work in [modify_side] in BfW 1.10

    [ai]
        id=recruiting
        description=_"Recruiting Micro AI"
        version=10710
        [engine]
            name="lua"
            code= <<
                local ai = ...
                return wesnoth.require("~add-ons/AI-demos/micro_ais/ais/mai_recruit_engine.lua").init(ai)
            >>
        [/engine]
        {RCA_STAGE}
    [/ai]
#enddef

#define MICRO_AI_GOTO
    # Sets up the Goto Micro AI for a side
    # Include this macro in the side definition
    # Needs to be in [side], does not work in [modify_side] in BfW 1.10

    [ai]
        id=goto
        description=_"Goto Micro AI"
        version=10710
        [engine]
            name="lua"
            code= <<
                local ai = ...
                return wesnoth.require("~add-ons/AI-demos/micro_ais/ais/mai_goto_engine.lua").init(ai)
            >>
        [/engine]
        {RCA_STAGE}
    [/ai]
#enddef
