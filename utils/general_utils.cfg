#textdomain wesnoth-Grnk

#define MESSAGE_RIGHT ID TEXT
    # Message with image on the right
    {STORE_UNIT_VAR id={ID} profile message_profile}
    {MESSAGE {ID} "$message_profile~FL()~RIGHT()" "" {TEXT}}
    {CLEAR_VARIABLE message_profile}
#enddef

#define MESSAGE_NOSCROLL ID TEXT
    # Message without scrolling to speaker
    [message]
        speaker={ID}
        message={TEXT}
        scroll=no
    [/message]
#enddef

#define COUNT_UNITS FILTER
    # Count the units that match the filter; returned in variable 'unit_count'
    # FILTER: the unit filter to be matched
    [store_unit]
        [filter]
            {FILTER}
        [/filter]
        variable=stored_count_units
        mode=append
    [/store_unit]
    {VARIABLE unit_count $stored_count_units.length}
    {CLEAR_VARIABLE stored_count_units}
#enddef

#define GET_ALL_UNITS FILTER
    # Find all units that match the filter
    # !!!!! Note: this does include units on the recall list !!!!!
    # Returned in array: filtered_units
    [store_unit]
        [filter]
            {FILTER}
        [/filter]
        variable=filtered_units
    [/store_unit]
#enddef

#define GET_RANDOM_UNIT_ID FILTER
    # Find all units that match the filter, then choose one randomly
    # !!!!! Note: Only units on the map are considered, not on the recall list !!!!!
    # Returned id in array: random_unit_id
    # If no units match filter: return -1
    {GET_ALL_UNITS (
        x=1-9999
        {FILTER}
    )}
    {IF_VAR filtered_units.length equals 0 (
        [then]
            {VARIABLE random_unit_id -1}
        [/then]
        [else]
            [set_variable]
                name=GRU_random_unit
                rand="0..$($filtered_units.length-1)"
            [/set_variable]

            {VARIABLE random_unit_id $filtered_units[$GRU_random_unit].id}
            {CLEAR_VARIABLE GRU_random_unit}
        [/else]
    )}
    {CLEAR_VARIABLE filtered_units}
#enddef

#define SOUND SOUND_FILE
    [sound]
        name={SOUND_FILE}
    [/sound]
#enddef

#define DELAY DELAY_TIME
    [delay]
        time={DELAY_TIME}
    [/delay]
#enddef

#define CLOSE_EMPTY_HEX X Y NOT_TERRAIN STARTING_RADIUS
    # Get the coordinates of an unoccupied hex within STARTING_RADIUS of the input coordinates
    # that is not of terrain type NOT_TERRAIN
    # INPUT: X Y : the coordinates of the hex around which to look
    #        NOT_TERRAIN: the type of terrain that the hex should NOT have
    #        STARTING_RADIUS: at what radius from the center hex we start; this is increased one by one until an empty hex is found
    # Output: hex_x hex_y: return variable of new coordinates

    # This first part is so that () or "" are possible for NOT_TERRAIN
    # even when passed through several macros with random use of "" and ()
    [set_variable]
        name=CEH_terrain
        value={NOT_TERRAIN}
    [/set_variable]
    {IF_VAR CEH_terrain equals "" (
        [then]
            {VARIABLE CEH_terrain XXX}
        [/then]
    )}

    {VARIABLE r_CEH {STARTING_RADIUS}}
    [while]
        {VARIABLE_CONDITIONAL r_CEH less_than 99}

        [do]
            [store_locations]
                [and]  # within radius
                    x,y={X},{Y}
                    radius=$r_CEH
                [/and]
                [not]  # unoccupied
                    [filter]
                    [/filter]
                [/not]
                [not]  # not of the given type of terrain
                    terrain=$CEH_terrain
                [/not]
                variable=CEH_coords
            [/store_locations]
            {IF_VAR CEH_coords.length greater_than 0 (
                [then]  # if something was found, break the loop
                    #{FOREACH CEH_coords i_CEH}
                    #{DEBUG ($r_CEH $i_CEH $CEH_coords.length $CEH_coords[$i_CEH].x $CEH_coords[$i_CEH].y $CEH_coords[$i_CEH].terrain)}
                    #{NEXT i_CEH}
                    {VARIABLE r_CEH 99}
                [/then]
                [else]  # otherwise increase the search radius
                    {VARIABLE_OP r_CEH add 1}
                    #{DEBUG "$r_CEH $CEH_terrain"}
                [/else]
            )}
        [/do]
    [/while]
    {CLEAR_VARIABLE r_CEH,CEH_terrain}

    # Now pick one of those hexes randomly
    {VARIABLE i_hex_CEH $CEH_coords.length}
    {VARIABLE_OP i_hex_CEH add -1}
    [set_variable]
        name=CEH_random_hex
        rand=0..$i_hex_CEH
    [/set_variable]
    {VARIABLE hex_x $CEH_coords[$CEH_random_hex].x}
    {VARIABLE hex_y $CEH_coords[$CEH_random_hex].y}
    #{MESSAGE narrator "" "" (Result: $hex_x $hex_y [$CEH_random_hex/$CEH_coords.length])}
    {CLEAR_VARIABLE CEH_coords,i_hex_CEH,CEH_random_hex}
#enddef

#define FAR_EMPTY_HEX X Y NOT_TERRAIN STARTING_RADIUS
    # This is almost the same as CLOSE_EMPTY_HEX, except that it return coordinates for
    # a location that is _exactly_ as far away as STARTING_RADIUS (or farther, if none available)
    # Get the coordinates of an unoccupied, hex a given radius away from the input coordinates
    # that is not of terrain type NOT_TERRAIN
    # INPUT: X Y : the coordinates of the hex around which to look
    #        NOT_TERRAIN: the type of terrain that the hex should NOT have
    #        STARTING_RADIUS: at what radius from the center hex we start; this is increased one by one until an empty hex is found
    # Output: hex_x hex_y: return variable of new coordinates

    # This first part is so that () or "" are possible for NOT_TERRAIN
    # even when passed through several macros with random use of "" and ()
    [set_variable]
        name=FEH_terrain
        value={NOT_TERRAIN}
    [/set_variable]
    {IF_VAR FEH_terrain equals "" (
        [then]
            {VARIABLE FEH_terrain XXX}
        [/then]
    )}
    {VARIABLE r_FEH {STARTING_RADIUS}}
    [while]
        {VARIABLE_CONDITIONAL r_FEH less_than 99}

        [do]
            {VARIABLE r_minus_1_FEH $r_FEH}
            {VARIABLE_OP r_minus_1_FEH add -1}
            [store_locations]
                [and]  # within radius
                    x,y={X},{Y}
                    radius=$r_FEH
                [/and]
                [not]  # not within radius
                    x,y={X},{Y}
                    radius=$r_minus_1_FEH
                [/not]
                [not]  # unoccupied
                    [filter]
                    [/filter]
                [/not]
                [not]  # not of the given type of terrain
                    terrain=$FEH_terrain
                [/not]
                variable=FEH_coords
            [/store_locations]
            {IF_VAR FEH_coords.length greater_than 0 (
                [then]  # if something was found, break the loop
                    #{FOREACH FEH_coords i_FEH}
                    #{DEBUG ($r_FEH $i_FEH $FEH_coords.length $FEH_coords[$i_FEH].x $FEH_coords[$i_FEH].y $FEH_coords[$i_FEH].terrain)}
                    #{NEXT i_FEH}
                    {VARIABLE r_FEH 99}
                [/then]
                [else]  # otherwise increase the search radius
                    {VARIABLE_OP r_FEH add 1}
                    #{DEBUG "$r_FEH $FEH_terrain"}
                [/else]
            )}
        [/do]
    [/while]
    {CLEAR_VARIABLE r_FEH,r_minus_1_FEH,FEH_terrain}

    # Now pick one of those hexes randomly
    {VARIABLE i_hex_FEH $FEH_coords.length}
    {VARIABLE_OP i_hex_FEH add -1}
    [set_variable]
        name=FEH_random_hex
        rand=0..$i_hex_FEH
    [/set_variable]
    {VARIABLE hex_x $FEH_coords[$FEH_random_hex].x}
    {VARIABLE hex_y $FEH_coords[$FEH_random_hex].y}
    #{MESSAGE narrator "" "" (Result: $hex_x $hex_y [$FEH_random_hex/$FEH_coords.length])}
    {CLEAR_VARIABLE FEH_coords,i_hex_FEH,FEH_random_hex}
#enddef

#define FIND_CLOSEST_HEX X Y LOCATION_FILTER
    # Find the coordinates of the hex closest to X,Y that matches LOCATION_FILTER
    # Output: hex_x hex_y: return variable of new coordinates (-1 if none found)

    {VARIABLE r_FCH 0}
    [while]
        {VARIABLE_CONDITIONAL r_FCH less_than 99}

        [do]
            [store_locations]
                [and]  # within radius
                    x,y={X},{Y}
                    radius=$r_FCH
                [/and]
                {LOCATION_FILTER}
                variable=FCH_coords
            [/store_locations]
            {IF_VAR FCH_coords.length greater_than 0 (
                [then]  # if something was found, break the loop
                    #{FOREACH FCH_coords i_FCH}
                    #{DEBUG ($r_FCH $i_FCH $FCH_coords.length $FCH_coords[$i_FCH].x $FCH_coords[$i_FCH].y $FCH_coords[$i_FCH].terrain)}
                    #{NEXT i_FCH}
                    {VARIABLE r_FCH 99}
                [/then]
                [else]  # otherwise increase the search radius
                    {VARIABLE_OP r_FCH add 1}
                    #{DEBUG "$r_FCH"}
                [/else]
            )}
        [/do]
    [/while]
    {CLEAR_VARIABLE r_FCH}

    # Now pick one of those hexes randomly
    {IF_VAR FCH_coords.length greater_than 0 (
        [then]
            {VARIABLE i_hex_FCH $FCH_coords.length}
            {VARIABLE_OP i_hex_FCH add -1}
            [set_variable]
                name=FCH_random_hex
                rand=0..$i_hex_FCH
            [/set_variable]
            {VARIABLE hex_x $FCH_coords[$FCH_random_hex].x}
            {VARIABLE hex_y $FCH_coords[$FCH_random_hex].y}
            #{MESSAGE narrator "" "" (Result: $hex_x $hex_y [$FCH_random_hex/$FCH_coords.length])}
        [/then]
        [else]
            {VARIABLE hex_x -1}
            {VARIABLE hex_y -1}
        [/else]
    )}
    {CLEAR_VARIABLE FCH_coords,i_hex_FCH,FCH_random_hex}
#enddef

#define FIND_OPPOSITE_HEX X_CENTER Y_CENTER X Y
    # X_CENTER,Y_CENTER: position of the center of the 7 hexes
    # X,Y: position of hex for which the opposite side w.r.t X_CENTER,Y_CENTER is to be found
    # Output: opp_x opp_y: return variable of new coordinates

    # Finding the opposite x position is easy, simply add (X_CENTER-X) to X_CENTER
    {VARIABLE opp_x {X_CENTER}}
    {VARIABLE_OP opp_x sub {X}}  # This is dx=X_CENTER-X
    {VARIABLE_OP opp_x add {X_CENTER}}
    #{MESSAGE narrator "" "" ({X_CENTER} $opp_x)}

    # y is slightly more tricky, because of the hexagonal shape, but there's a neat trick
    #   that saves us from having to build in a lot of if statements
    # Among the adjacent hexes, it is the one with the correct x, and y _different_ from Y
    [store_locations]
        [filter_adjacent_location]
            x,y={X_CENTER},{Y_CENTER}
        [/filter_adjacent_location]
        [and]
            x=$opp_x
        [/and]
        [not]
            y={Y}
        [/not]
        variable=FOH_coords
    [/store_locations]
    #{MESSAGE narrator "" "" ($FOH_coords.length)}

    {VARIABLE opp_y $FOH_coords[0].y}
    #{MESSAGE narrator "" "" ($opp_x $opp_y)}

    {CLEAR_VARIABLE FOH_coords}
#enddef

#define JUMP_BACK ID FROM_X FROM_Y
    # Have unit matching ID move (jump) to
    # the location opposite to FROM_X,FROM_Y
    # if that hex is unoccupied and passable
    # Return value: 'jumped' contains 'yes' or 'no'

    # First, store the unit, as we need several of its variables
    [store_unit]
        [filter]
            id={ID}
        [/filter]
        variable=jump_unit
    [/store_unit]

    # Now find the jump_to hex
    {FIND_OPPOSITE_HEX $jump_unit.x $jump_unit.y {FROM_X} {FROM_Y}}
    #{MESSAGE Grnk "" "" _"Going to: $opp_x,$opp_y"}

    # Check if the unit can reach this hex:
    [store_reachable_locations]
        [filter]
            id={ID}
        [/filter]
        [filter_location]
            x,y=$opp_x,$opp_y
            [not]  # unoccupied
                [filter]
                [/filter]
            [/not]
        [/filter_location]
        moves=max
        variable=jump_locs
    [/store_reachable_locations]

    # Only go there if it is reachable and unoccupied
    {IF_VAR jump_locs.length not_equals 0 (
        [then]
            [move_unit]
                id={ID}
                to_x=$opp_x
                to_y=$opp_y
            [/move_unit]
            {VARIABLE jumped yes}
        [/then]
        [else]
            {VARIABLE jumped no}
        [/else]
    )}

    {CLEAR_VARIABLE jump_unit,opp_x,opp_y,jump_locs}
#enddef

#define REDRAW SIDE
    # SIDE: fog and shroud will be reset for this side also
    [redraw]
        side={SIDE}
    [/redraw]
#enddef

#define NEW_LEADER_APPEARS SIDE TYPE X Y ID WML
    # Creates the new leader,
    # Starts ai control for the side and unhides it
    # WML: can be used to set additional unit properties, e.g. set a name
    [unit]
        side={SIDE}
        id={ID}
        type={TYPE}
        x,y={X},{Y}
        generate_name=yes
        canrecruit=yes
        {WML}
    [/unit]

    [modify_side]
        side={SIDE}
        hidden=no
        controller=ai
    [/modify_side]
#enddef

#define RANDOM_FOE SIDE PROBABILITY UNITS NUMBER LOCATION_FILTER UNIT_WML
    # PROBABILITY % chance of units to appear in the LOCATION_FILTER area
    # Unit type is chosen randomly from UNITS
    # UNIT_WML: WML code to be added to unit description
    # NUMBER units of the same type will be placed there
    # First unit only goes on hexes that are unoccupied and without a neighboring unit
    # No unit will be placed on a village
    [set_variable]
        name=RF_rand_prob
        rand=0..99
    [/set_variable]
    #{DEBUG "RANDOM_FOE ({UNITS}): <prob: {PROBABILITY}; value: $RF_rand_prob"}
    {IF_VAR RF_rand_prob less_than {PROBABILITY} (
        [then]
            # Choose unit type randomly
            [set_variable]
                name=RF_rand_type
                rand={UNITS}
            [/set_variable]

            [store_locations]
                {LOCATION_FILTER}
                [not]
                    terrain=*^V*
                [/not]
                [not]
                    [filter]
                    [/filter]
                [/not]
                [not]
                    [filter_adjacent_location]
                        [filter]
                        [/filter]
                    [/filter_adjacent_location]
                [/not]
                variable=RF_stored_locs
            [/store_locations]

            {IF_VAR RF_stored_locs.length not_equals 0 (
                [then]
                    [set_variable]
                        name=RF_rand_loc
                        rand="0..$($RF_stored_locs.length-1)"
                    [/set_variable]

                    #{DEBUG "  $RF_rand_type $RF_stored_locs[$RF_rand_loc].x $RF_stored_locs[$RF_rand_loc].y x{NUMBER}"}
                    [while]
                        [variable]
                            name=RF_rep_i
                            less_than={NUMBER}
                        [/variable]
                        [do]
                            {CLOSE_EMPTY_HEX $RF_stored_locs[$RF_rand_loc].x $RF_stored_locs[$RF_rand_loc].y *^V* 0}
                            {UNIT {SIDE} $RF_rand_type $hex_x $hex_y {UNIT_WML}}
                            #{DEBUG "GENERIC_UNIT {SIDE} $RF_rand_type $RF_stored_locs[$RF_rand_loc].x $RF_stored_locs[$RF_rand_loc].y; $hex_x $hex_y"}
                            {VARIABLE_OP RF_rep_i add 1}
                        [/do]
                    [/while]
                    {CLEAR_VARIABLE RF_rep_i}
                [/then]
            )}
        [/then]
    )}
    {CLEAR_VARIABLE RF_rand_prob,RF_rand_type,RF_stored_locs,RF_rand_loc,hex_x,hex_y}
#enddef

#define FULL_HEAL_AND_CURE FILTER
    {FULL_HEAL {FILTER}}
    {MODIFY_UNIT {FILTER} status.poisoned no}
    {MODIFY_UNIT {FILTER} status.slowed no}
#enddef

#define MINIMUM CONTAINER VAR
    # Get the minimum value of CONTAINER.VAR
    # Result is returned in variable 'minimum'
    # Index is returned in min_index
    # It only works for values smaller than 99999

    # Seed for the minimum variable
    {VARIABLE minimum 99999}

    # Go through container variable
    {FOREACH {CONTAINER} i_min}
        {IF_VAR {CONTAINER}[$i_min].{VAR} less_than $minimum (
            [then]
                {VARIABLE minimum ${CONTAINER}[$i_min].{VAR}}
                {VARIABLE min_index $i_min}
            [/then]
        )}
        #{DEBUG "$i_min: $minimum (${CONTAINER}[$i_min].{VAR})"}
    {NEXT i_min}
#enddef

#define MAXIMUM CONTAINER VAR
    # Get the maximum value of CONTAINER.VAR
    # Result is returned in variable 'maximum'
    # Index is returned in max_index
    # It only works for values larger than -99999

    # Seed for the maximum variable
    {VARIABLE maximum -99999}

    # Go through container variable
    {FOREACH {CONTAINER} i_max}
        {IF_VAR {CONTAINER}[$i_max].{VAR} greater_than $maximum (
            [then]
                {VARIABLE maximum ${CONTAINER}[$i_max].{VAR}}
                {VARIABLE max_index $i_max}
            [/then]
        )}
        #{DEBUG "$i_max: $maximum (${CONTAINER}[$i_max].{VAR})"}
    {NEXT i_max}
#enddef

#define MAXIMUM_2PARAMETERS CONTAINER VAR1 VAR2
    # Get the maximum value of CONTAINER.VAR1
    # For equal values of VAR1, use VAR2 as discriminator
    # Result is returned in variables 'maximum1' and 'maximum2'
    # Index is returned in max_i
    # It only works for values larger than -99999

    # Seed for the maximum variable
    {VARIABLE maximum1 -99999}
    {VARIABLE maximum2 -99999}

    # Go through container variable
    {FOREACH {CONTAINER} i_max}
        [if]
            {VARIABLE_CONDITIONAL {CONTAINER}[$i_max].{VAR1} greater_than $maximum1}
            [or]
                {VARIABLE_CONDITIONAL {CONTAINER}[$i_max].{VAR1} equals $maximum1}
                {VARIABLE_CONDITIONAL {CONTAINER}[$i_max].{VAR2} greater_than $maximum2}
            [/or]
            [then]
                {VARIABLE maximum1 ${CONTAINER}[$i_max].{VAR1}}
                {VARIABLE maximum2 ${CONTAINER}[$i_max].{VAR2}}
                {VARIABLE max_index $i_max}
            [/then]
        [/if]
        #{DEBUG "$i_max: $maximum1 $maximum2 $max_index"}
    {NEXT i_max}
#enddef

#define UNSTORE_BEST_UNIT VAR X Y NOT_TERRAIN SIDE ALTERNATE_TYPES NEW_UNIT_WML
    # Unstores the best unit from variable VAR; and removes unit from VAR
    # at position X,Y (or closest hex not matching NOT_TERRAIN
    # Return value: new_unit_id: id of new unit

    # Best unit defined as: highest level, and smallest (max_experience-experience) value
    # If no unit in variable, create unit choosing randomly from ALTERNATE_TYPES (side: SIDE)
    # NEW_UNIT_WML contains additional WML for newly created units
    # If ALTERNATE_TYPES is empty: no alternate unit is created

    # Find the best empty hex for unit
    {CLOSE_EMPTY_HEX {X} {Y} {NOT_TERRAIN} 0}

    {IF_VAR {VAR}.length greater_than 0 (
        [then]  # If there is a unit left in the variable
            # Need max_experience-experience as a variable; dirty trick to do so
            # Also use negative of that, can look for maximum that way, not minimum
            {FOREACH {VAR} i_best}
                {VARIABLE_OP {VAR}[$i_best].experience sub ${VAR}[$i_best].max_experience}
            {NEXT i_best}

            # Find the best unit
            {MAXIMUM_2PARAMETERS {VAR} level experience}

            # Restore the experience value
            {FOREACH {VAR} i_best}
                {VARIABLE_OP {VAR}[$i_best].experience add ${VAR}[$i_best].max_experience}
            {NEXT i_best}

            {VARIABLE new_unit_id ${VAR}[$max_index].id}
            [unstore_unit]
                variable={VAR}[$max_index]
                x,y=$hex_x,$hex_y
                find_vacant=no
                check_passability=no
            [/unstore_unit]

            # Remove the unit from the array
            {CLEAR_VARIABLE {VAR}[$max_index],maximum1,maximum2,max_index}
        [/then]
        [else]  # If there is no unit left in the variable
            #This first part is so that () or "" can be passed through several macros
            [set_variable]
                name=UBU_types
                value={ALTERNATE_TYPES}
            [/set_variable]
            {IF_VAR UBU_types not_equals "" (
                [then]
                    [set_variable]
                        name=UBU_random_types
                        rand=$UBU_types
                    [/set_variable]
                    [unit]
                        side={SIDE}
                        type=$UBU_random_types
                        x,y=$hex_x,$hex_y
                        {NEW_UNIT_WML}
                    [/unit]
                    {STORE_UNIT_VAR (x,y=$hex_x,$hex_y) id new_unit_id}
                [/then]
                [else]
                    {VARIABLE new_unit_id None}
                [/else]
            )}
            {CLEAR_VARIABLE UBU_random_types,UBU_types}
        [/else]
    )}

    {CLEAR_VARIABLE hex_x,hex_y}
#enddef

#define RECALL_BEST_UNIT SIDE FILTER X Y NOT_TERRAIN ALTERNATE_TYPES NEW_UNIT_WML
    # Same as UNSTORE_BEST_UNIT, but take unit from the recall list
    # Also uses additional filter FILTER for selecting units - can be blank,
    #   SIDE needs to be given separately
    # Return value: new_unit_id: id of new unit

    # Create a variable first, to be able to use UNSTORE_BEST_UNIT
    [store_unit]
        [filter]
            side={SIDE}
            {FILTER}
            [not]
                x=1-9999
            [/not]
        [/filter]
        kill=no
        mode=append
        variable=stored_recall_units
    [/store_unit]
    #{DEBUG "Number of units on recall list side {SIDE}: $stored_recall_units.length"}

    {UNSTORE_BEST_UNIT stored_recall_units {X} {Y} {NOT_TERRAIN} {SIDE} {ALTERNATE_TYPES} {NEW_UNIT_WML}}

    # Also need to delete this unit off the recall list
    [kill]
        id=$new_unit_id
        [not]
            x=1-9999
        [/not]
    [/kill]

    {CLEAR_VARIABLE stored_recall_units}
#enddef

#define SELECT_BEST_UNIT FILTER
    # Selects the best unit matching FILTER on the map (not including the recall list)
    # Return value: new_unit_id: id of new unit or -1 if no unit matches

    [store_unit]
        [filter]
            {FILTER}
            x=1-9999
        [/filter]
        kill=no
        mode=append
        variable=stored_SBU_units
    [/store_unit]
    #{DEBUG "Number of units to select from: $stored_SBU_units.length"}

    {IF_VAR stored_SBU_units.length greater_than 0 (
        [then]  # If there is a unit left in the variable
            # Need max_experience-experience as a variable; dirty trick to do so
            # Also use negative of that, can look for maximum that way, not minimum
            {FOREACH stored_SBU_units i_best}
                {VARIABLE_OP stored_SBU_units[$i_best].experience sub $stored_SBU_units[$i_best].max_experience}
                #{DEBUG "$stored_SBU_units[$i_best].name stored_SBU_units[$i_best].type $stored_SBU_units[$i_best].experience"}
            {NEXT i_best}

            # Find the best unit
            {MAXIMUM_2PARAMETERS stored_SBU_units level experience}
            {VARIABLE selected_unit_id $stored_SBU_units[$max_index].id}
            {CLEAR_VARIABLE stored_SBU_units,maximum1,maximum2,max_index}
        [/then]
        [else]
            {VARIABLE selected_unit_id -1}
        [/else]
    )}
#enddef

#define RANDOM_UNIT SIDE TYPES X Y WML
    # Randomly chose from TYPES and place at X,Y
    [set_variable]
        name=random_type
        rand={TYPES}
    [/set_variable]
    [unit]
        side={SIDE}
        type=$random_type
        x,y={X},{Y}
        {WML}
    [/unit]
    {CLEAR_VARIABLE random_type}
#enddef

#define GIVE_KILL_EXPERIENCE_BEFORE_STORE UNIT_ID KILLED_UNIT_LEVEL
    # I have some events in which a unit gets stored (and killed)
    # before it will get the experience points for the kill
    # that it earned.  This macro gives the unit those points manually.
    # UNIT_ID: id of the unit to gain the XP
    # KILLED_UNIT_LEVEL: Level of the unit that was killed

    # XP to be added
    {VARIABLE add_experience "$({KILLED_UNIT_LEVEL}*8)"}
    {IF_VAR add_experience equals 0 (
        [then]  # If the enemy was Level 0
            {VARIABLE add_experience 4}
        [/then]
    )}

    # Give them to unit
    {STORE_UNIT_VAR id={UNIT_ID} experience current_experience}
    {MODIFY_UNIT id={UNIT_ID} experience "$($current_experience+$add_experience)"}

    # For testing that it worked:
    #{MESSAGE {UNIT_ID} "" "" _"Check out my XP on the right."}

    {CLEAR_VARIABLE add_experience,current_experience}
#enddef

#define TURNS_LATER TURN_TYPE TURNS VAR WML
    # Executes WML TURNS turns after the current turn, on a TURN_TYPE event
    # The turn_counter variable is set specifically, so that several of these can
    # be used in the same scenario
    {VARIABLE {VAR} "$($turn_number+{TURNS})"}

    [event]
        name={TURN_TYPE}
        first_time_only=no

        {IF_VAR turn_number equals ${VAR} (
            [then]
                {WML}
                {CLEAR_VARIABLE {VAR}}
            [/then]
        )}
    [/event]
#enddef

#define SET_GOLD SIDE AMOUNT
    # Set the gold of a side to a specific amount
    # as opposed to adding an amount
    [store_gold]
        side={SIDE}
    [/store_gold]
    [gold]
        side={SIDE}
        amount="$({AMOUNT}-$gold)"
    [/gold]
    {CLEAR_VARIABLE gold}
#enddef

#define CAPTURE_FILTERED_VILLAGES_COPY SIDE FILTER
    # Change ownership of villages matching the specified location filter.
    [store_locations]
        {FILTER}
        variable=temp_target_villages
    [/store_locations]

    {FOREACH temp_target_villages i}
        [capture_village]
            side={SIDE}
            x,y=$temp_target_villages[$i].x,$temp_target_villages[$i].y
        [/capture_village]
    {NEXT i}

    {CLEAR_VARIABLE temp_target_villages}
#enddef

#define ONE_RECRUIT_PER_TURN SIDE TYPES
    # If used, SIDE can recruit exactly one unit of type TYPES each turn
    [event]
        name=recruit
        first_time_only=no
        [filter]
            side={SIDE}
            type={TYPES}
        [/filter]

        [disallow_recruit]
            side={SIDE}
            type={TYPES}
        [/disallow_recruit]

        # Reset recruiting on next turn
        [event]
            name=new turn

            [allow_recruit]
                side={SIDE}
                type={TYPES}
            [/allow_recruit]
        [/event]
    [/event]
#enddef

#define ONE_RECRUIT_EVERY_OTHER_TURN SIDE TYPES
    # If used, SIDE can recruit exactly one unit of type TYPES each turn
    [event]
        name=recruit
        first_time_only=no
        [filter]
            side={SIDE}
            type={TYPES}
        [/filter]

        [disallow_recruit]
            side={SIDE}
            type={TYPES}
        [/disallow_recruit]

        # Reset recruiting 2 turns later
        [event]
            name=new turn
            [event]
                name=new turn

                [allow_recruit]
                    side={SIDE}
                    type={TYPES}
                [/allow_recruit]
            [/event]
        [/event]
    [/event]
#enddef
